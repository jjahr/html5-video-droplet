-- HTML5 Video Encoder Droplet

-- Summary: 
-- This AppleScript droplet takes video files and converts each to 3 output videos in the same folder as the source, using ffmpeg.  The 3 output formats are Ogg Vorbis (ogg video, vorbis audio), MP4 (mp4 container, h.264 video, aac audio), and WEBM (vp8 video, vorbis audio).  The formats are discussed here: http://diveintohtml5.info/video.html
-- It prompts what width to resize to, and what video bitrate to use.

-- To use: 
--Drag one or more videos onto the application icon.

-- Requirements:
-- Install xcode
-- Install ffmpeg (brew install ffmpeg --with-theora --with-libogg --with-libvorbis --with-libvpx)

-- To edit the app:
-- Open with AppleScript Editor

on run
	-- If you double click the app icon
	display dialog "Drop 1 or more files onto me to convert them."
end run

on open names
	-- Configuration
	set suffix to "-html5video"
	set audiobitrate to "128k"
	
	display dialog "Resize to width (pixels, 0 = don't resize)" default answer "0"
	set videowidth to text returned of result
	display dialog "Video bitrate (MBps)" default answer "1"
	
	set videobitrate to text returned of result
	--display dialog videobitrate
	
	set videobitratestring to videobitrate
	
	-- videobitratestring is only used for filename suffix
	if videobitratestring < 1 then
		set videobitratestring to videobitratestring * 1024 & "k"
	else
		set videobitratestring to videobitratestring & "m"
	end if
	
	-- Convert MB to KB, because KB has been giving me more predictable file size.
	set videobitrate to (videobitrate * 1024) as integer
	--display dialog videobitrate
	set videobitrate to (videobitrate as string) & "k"
	--display dialog videobitrate
	
	set suffix to suffix & "-" & videobitratestring
	
	-- Set videowidth parameter string
	if videowidth is 0 then
		set videowidth to ""
	else
		set videowidth to " -vf scale=" & videowidth & ":-1 "
	end if
	
	set pathNamesString to "" -- Start with empty text string.
	
	-- Loop through all input files
	repeat with itemnum from 1 to count of names
		
		-- ipath: absolute path to file
		set ipath to POSIX path of (item itemnum of names)
		--set iparent to POSIX path of container of (item itemnum of names)
		
		-- iparent: absolute path to file's parent folder
		set iparent to ""
		tell application "Finder"
			set iparent to ipath
			set AppleScript's text item delimiters to "/"
			set iparent to text items 1 thru -2 of iparent as text
			set iparent to iparent & "/"
		end tell
		
		-- iname: file's name without extension
		set iname to ""
		tell application "Finder"
			set iname to name of file (item itemnum of names)
			set AppleScript's text item delimiters to "."
			if number of text items of iname > 1 then
				set iname to text items 1 thru -2 of iname as text
			end if
		end tell
		--set pathNamesString to pathNamesString & ipath & return
		
		-- Run ffmpeg in a terminal window
		tell application "Terminal"
			-- Debug: echo variables
			--do script "echo ipath: " & ipath & "; echo iname: " & iname & "; echo i: " & "iparent: " & iparent & ";"
			
			-- Encode Ogg Vorbis (ogg video, vorbis audio)
			do script "ffmpeg -i  '" & ipath & "' -acodec libvorbis -ac 2 -ab " & audiobitrate & " -ar 44100 -b:v " & videobitrate & " " & videowidth & "'" & iparent & iname & suffix & ".ogv';"
			
			-- Encode MP4 (mp4 container, h.264 video, aac audio)
			do script "ffmpeg -i '" & ipath & "' -acodec aac -ac 2 -strict experimental -ab " & audiobitrate & " -vcodec libx264 -preset slow -profile:v baseline -level 30 -maxrate 10000000 -bufsize 10000000 -b:v " & videobitrate & " -f mp4 -threads 0 -pix_fmt yuv420p " & videowidth & "'" & iparent & iname & suffix & ".mp4';"
			
			-- Encode WEBM (vp8 video, vorbis audio)
			do script "ffmpeg -i '" & ipath & "' -acodec libvorbis -ac 2 -ab " & audiobitrate & " -ar 44100 -vcodec libvpx -b:v " & videobitrate & " " & videowidth & "'" & iparent & iname & suffix & ".webm';"
		end tell
	end repeat
	return
end open